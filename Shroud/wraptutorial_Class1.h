// wraptutorial_Class1.h
// This file is generated by Shroud 0.12.1. Do not edit.
/**
 * \file wraptutorial_Class1.h
 * \brief Shroud generated wrapper for Class1 class
 */
// For C users and C++ implementation

#ifndef WRAPTUTORIAL_CLASS1_H
#define WRAPTUTORIAL_CLASS1_H

#include "typesTutorial.h"
#ifndef __cplusplus
#include <stdbool.h>
#endif

// splicer begin namespace.tutorial.class.Class1.CXX_declarations
// splicer end namespace.tutorial.class.Class1.CXX_declarations

#ifdef __cplusplus
extern "C" {
#endif

// splicer begin namespace.tutorial.class.Class1.C_declarations
// splicer end namespace.tutorial.class.Class1.C_declarations

TUT_tutorial_Class1 * TUT_tutorial_Class1_new_0(int test1, double test2,
    bool TorF, TUT_tutorial_Class1 * SHC_rv);

TUT_tutorial_Class1 * TUT_tutorial_Class1_new_1(int test1, double test2,
    bool TorF, int o_test, TUT_tutorial_Class1 * SHC_rv);

TUT_tutorial_Class1 * TUT_tutorial_Class1_new_2(int test1, double test2,
    bool TorF, int o_test, double o_test2,
    TUT_tutorial_Class1 * SHC_rv);

TUT_tutorial_Class1 * TUT_tutorial_Class1_new_3(int test1, double test2,
    bool TorF, int o_test, double o_test2, bool o_TorF,
    TUT_tutorial_Class1 * SHC_rv);

int * TUT_tutorial_Class1_get_test_ptr(TUT_tutorial_Class1 * self,
    int * len);

int * TUT_tutorial_Class1_get__two_darray_ptr(
    TUT_tutorial_Class1 * self, int * len1, int * len2);

int * TUT_tutorial_Class1_get_2d_new(TUT_tutorial_Class1 * self,
    int * N, int * M);

int * TUT_tutorial_Class1_get_2d_new_bufferify(
    TUT_tutorial_Class1 * self, TUT_SHROUD_array *DSHC_rv, int * N,
    int * M);

void TUT_tutorial_Class1_set_test(TUT_tutorial_Class1 * self, int N);

void TUT_tutorial_Class1_set__two_darray(TUT_tutorial_Class1 * self,
    int N, int M);

void TUT_tutorial_Class1_delete(TUT_tutorial_Class1 * self);

void TUT_tutorial_Class1_method1_0(TUT_tutorial_Class1 * self,
    int * vec2d);

void TUT_tutorial_Class1_method1_1(TUT_tutorial_Class1 * self,
    int * vec2d, int o_test);

void TUT_tutorial_Class1_method1_2(TUT_tutorial_Class1 * self,
    int * vec2d, int o_test, int * value);

void TUT_tutorial_Class1_method1_3(TUT_tutorial_Class1 * self,
    int * vec2d, int o_test, int * value, char * word2);

void TUT_tutorial_Class1_method1_3_bufferify(TUT_tutorial_Class1 * self,
    int * vec2d, int o_test, int * value, char * word2, int Lword2,
    int Nword2);

void TUT_tutorial_Class1_method1_4(TUT_tutorial_Class1 * self,
    int * vec2d, int o_test, int * value, char * word2, bool o_bool);

void TUT_tutorial_Class1_method1_4_bufferify(TUT_tutorial_Class1 * self,
    int * vec2d, int o_test, int * value, char * word2, int Lword2,
    int Nword2, bool o_bool);

void TUT_tutorial_Class1_accept_char_array_in(
    TUT_tutorial_Class1 * self, char **names, int clsize);

void TUT_tutorial_Class1_accept_char_array_in_bufferify(
    TUT_tutorial_Class1 * self, char *names, long Snames, int Nnames,
    int clsize);

bool TUT_tutorial_Class1_check(TUT_tutorial_Class1 * self, int N);

double TUT_tutorial_Class1_get_dk(TUT_tutorial_Class1 * self);

const int TUT_tutorial_Class1_get_intvalue(TUT_tutorial_Class1 * self);

#ifdef __cplusplus
}
#endif

#endif  // WRAPTUTORIAL_CLASS1_H
