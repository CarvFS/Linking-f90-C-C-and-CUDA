// wrapClass1.cpp
// This file is generated by Shroud 0.12.2. Do not edit.

#include "tutorial.hpp"
#include <cstddef>
#include "wrapClass1.h"

// splicer begin class.Class1.CXX_definitions
// splicer end class.Class1.CXX_definitions

extern "C" {

// splicer begin class.Class1.C_definitions
// splicer end class.Class1.C_definitions

TUT_Class1 * TUT_Class1_new_0(int test1, double test2, bool TorF,
    TUT_Class1 * SHC_rv)
{
    // splicer begin class.Class1.method.new_0
    Class1 *SHCXX_rv = new Class1(test1, test2, TorF);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    return SHC_rv;
    // splicer end class.Class1.method.new_0
}

TUT_Class1 * TUT_Class1_new_1(int test1, double test2, bool TorF,
    int o_test, TUT_Class1 * SHC_rv)
{
    // splicer begin class.Class1.method.new_1
    Class1 *SHCXX_rv = new Class1(test1, test2, TorF, o_test);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    return SHC_rv;
    // splicer end class.Class1.method.new_1
}

TUT_Class1 * TUT_Class1_new_2(int test1, double test2, bool TorF,
    int o_test, double o_test2, TUT_Class1 * SHC_rv)
{
    // splicer begin class.Class1.method.new_2
    Class1 *SHCXX_rv = new Class1(test1, test2, TorF, o_test, o_test2);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    return SHC_rv;
    // splicer end class.Class1.method.new_2
}

TUT_Class1 * TUT_Class1_new_3(int test1, double test2, bool TorF,
    int o_test, double o_test2, bool o_TorF, TUT_Class1 * SHC_rv)
{
    // splicer begin class.Class1.method.new_3
    Class1 *SHCXX_rv = new Class1(test1, test2, TorF, o_test, o_test2,
        o_TorF);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    return SHC_rv;
    // splicer end class.Class1.method.new_3
}

void TUT_Class1_delete(TUT_Class1 * self)
{
    Class1 *SH_this = static_cast<Class1 *>(self->addr);
    // splicer begin class.Class1.method.delete
    delete SH_this;
    self->addr = nullptr;
    // splicer end class.Class1.method.delete
}

void TUT_Class1_receive_struct(TUT_Class1 * self, TUT_str1 * arg)
{
    Class1 *SH_this = static_cast<Class1 *>(self->addr);
    // splicer begin class.Class1.method.receive_struct
    str1 * SHCXX_arg = static_cast<str1 *>(static_cast<void *>(arg));
    SH_this->receive_struct(SHCXX_arg);
    // splicer end class.Class1.method.receive_struct
}

void TUT_Class1_test_struct(TUT_Class1 * self)
{
    Class1 *SH_this = static_cast<Class1 *>(self->addr);
    // splicer begin class.Class1.method.test_struct
    SH_this->test_struct();
    // splicer end class.Class1.method.test_struct
}

}  // extern "C"
